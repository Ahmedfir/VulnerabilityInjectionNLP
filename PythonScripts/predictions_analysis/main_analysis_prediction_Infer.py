import os
import shutil
import utils
from confuzzion import compile_and_run_mutant
from predictions_analysis.insert_pred_inside_initial_file import main_juliet_test_suite

OS = "Windows" #Linux or Windows

# To be use when all the java files , testcasesupport and lib are on the same folder
def compile_one_java_file(java_file):
    separator = ";"
    if OS == "linux":
        separator = ":"

    print("Compile " + java_file)
    command = f"javac -cp lib/servlet-api.jar{separator}" \
              f"lib/commons-lang-2.5.jar{separator}" \
              f"lib/commons-codec-1.5.jar{separator}" \
              f"lib/javamail-1.4.4.jar " \
              f"testcasesupport/*.java " \
              f"{java_file}"
    #print(command)
    os.system(command)


def compile_all_java_files(path_to_folder):
    print("Compilation of all java file in the folder : ")
    print(path_to_folder)
    os.chdir(path_to_folder)
    for file in [file for file in os.listdir() if file.endswith(".java")]:
        # Remove package line
        compile_and_run_mutant.modify_line_in_java_file(file, "package", "")
        compile_one_java_file(file)

def select_and_copy_compilable_files(src_folder, dest_folder):
    #From a src folder where the files are .java and .class
    #Copy the .java when the .class exists
    try:
        os.mkdir(dest_folder)
    except:
        pass

    for file in os.listdir(src_folder):
        if file.endswith(".class"):
            equivalent_java_file = os.path.splitext(file)[0]+".java"
            shutil.copy(os.path.join(src_folder,equivalent_java_file),
                        os.path.join(dest_folder,equivalent_java_file))

if __name__ == "__main__":
    n_beam = 5
    dataset_path =  "C:\\Users\\benjamin.petit\\Documents\\Juliet_Test_Suite_5CWE_req_only_InferOK_OBFUSCATED"
    source_folder = "C:\\Users\\benjamin.petit\\Documents\\Seq2seq\\OpenNMT_5CWE_InferOK_token_less_150_Obfuscated_same_normal_dataset"
    fold = "fold4"
    iteration = 10000

    test_set_log_path = f"{source_folder}\\{fold}\\data\\test_logs.txt"
    test_set_pred_path = f"{source_folder}\\{fold}\\results\\test_beam5_iter{iteration}.txt"
    test_set_bads_path = f"{source_folder}\\{fold}\\data\\test_bads.txt"
    dest_folder_path = f"{source_folder}\\{fold}\\results\\test_beam5_iter{iteration}"

    # Insert predictions inside initial files
    print("Insert predictions inside initial files")
    main_juliet_test_suite(n_beam, dataset_path, test_set_log_path, test_set_pred_path, test_set_bads_path,
                           dest_folder_path)
    # Remove the space in the litteral char (ex: valueOf(' 0 ') => valueOf('0'))
    for file in os.listdir(dest_folder_path):
        if file.endswith(".java"):
            print(file)

            utils.replace_word_in_file(os.path.join(dest_folder_path, file), "\' ", "\'")
            utils.replace_word_in_file(os.path.join(dest_folder_path, file), " \'", "\'")

    # Copy the folders lib and testcasesupport before try to compile
    print("Copy the folders lib and testcasesupport before try to compile")
    utils.copy_content_folder(os.path.join(source_folder,"Juliet_files","lib"),
                              os.path.join(dest_folder_path,"lib"))
    utils.copy_content_folder(os.path.join(source_folder, "Juliet_files", "testcasesupport"),
                              os.path.join(dest_folder_path, "testcasesupport"))


    # Try to compile the predicted files
    print("Try to compile the predicted files")
    compile_all_java_files(dest_folder_path)

    # Select and copy the compilable files in a new folder
    print("Select and copy the compilable files in a new folder")
    second_dest_folder_path = f"{dest_folder_path}_Infer"
    select_and_copy_compilable_files(dest_folder_path,second_dest_folder_path)

    # Copy the folders lib and testcasesupport and the build.xml before the Infer analysis
    print("Copy the folders lib and testcasesupport and the build.xml before the Infer analysis")
    utils.copy_content_folder(os.path.join(source_folder,"Juliet_files","lib"),
                              os.path.join(second_dest_folder_path,"lib"))
    utils.copy_content_folder(os.path.join(source_folder, "Juliet_files", "testcasesupport"),
                              os.path.join(second_dest_folder_path, "testcasesupport"))
    utils.copy_file(os.path.join(source_folder, "Juliet_files", "build.xml"),
                    os.path.join(second_dest_folder_path, "build.xml"))

    print(f"The folder {second_dest_folder_path} can be analysed by Infer")
