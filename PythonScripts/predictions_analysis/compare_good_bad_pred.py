# Run depuis windows
"""
path_file_pred = 'C:\\Users\\benjamin.petit\\Documents\\Seq2seq\\OpenNMT_5CWE_diff6\\results\\pred-test_beam5_iter10000.txt'
path_file_test_good = 'C:\\Users\\benjamin.petit\\Documents\\Seq2seq\\OpenNMT_5CWE_diff6\\data\\test_goods.txt'
path_file_test_bad = 'C:\\Users\\benjamin.petit\\Documents\\Seq2seq\\OpenNMT_5CWE_diff6\\data\\test_bads.txt'
n_beam = 5
path_concat_file_dest = 'C:\\Users\\benjamin.petit\\Documents\\Seq2seq\\OpenNMT_5CWE_diff6\\results\\concat_results_test_goods.txt'
"""
"""
path_file_pred = 'C:\\Users\\benjamin.petit\\Documents\\Seq2seq\\OpenNMT_5CWE_B2Gonly\\results\\pred-test_beam5_iter4000.txt'
path_file_test_good = 'C:\\Users\\benjamin.petit\\Documents\\Seq2seq\\OpenNMT_5CWE_B2Gonly\\data\\test_goods.txt'
path_file_test_bad = 'C:\\Users\\benjamin.petit\\Documents\\Seq2seq\\OpenNMT_5CWE_B2Gonly\\data\\test_bads.txt'
n_beam = 5
path_concat_file_dest = 'C:\\Users\\benjamin.petit\\Documents\\Seq2seq\\OpenNMT_5CWE_B2Gonly\\results\\concat_results_test_goods.txt'
"""
path_file_pred = 'C:\\Users\\benjamin.petit\\Documents\\Seq2seq\\OpenNMT_5CWE_InferOK_token_less_150\\fold4\\results\\test_beam5_iter2000.txt'
path_file_test_good = 'C:\\Users\\benjamin.petit\\Documents\\Seq2seq\\OpenNMT_5CWE_InferOK_token_less_150\\fold4\\data\\test_goods.txt'
path_file_test_bad = 'C:\\Users\\benjamin.petit\\Documents\\Seq2seq\\OpenNMT_5CWE_InferOK_token_less_150\\fold4\\data\\test_bads.txt'
n_beam = 5
path_concat_file_dest = 'C:\\Users\\benjamin.petit\\Documents\\Seq2seq\\OpenNMT_5CWE_InferOK_token_less_150\\fold4\\results\\concat_results_test_goods_iter2000.txt'
def file_to_list(path_file):
    with open(path_file, 'r') as file:
        lines = file.read().split("\n")
        non_empty_lines = [line for line in lines][:-1]
    return non_empty_lines


pred_list = file_to_list(path_file_pred)
test_good_list = file_to_list(path_file_test_good)
test_bad_list = file_to_list(path_file_test_bad)

print(len(pred_list))
print(len(test_good_list))
print(len(test_bad_list))

if ((len(pred_list)/n_beam) == len(test_good_list) and (len(pred_list)/n_beam) == len(test_bad_list)):

    new_file = []
    for i, _ in enumerate(test_good_list):
        new_file.append(f"FILE {i+1}\n")
        new_file.append("# Good method\n")
        new_file.append(f'{test_good_list[i]}\n')
        new_file.append("# Bad method\n")
        new_file.append(f'{test_bad_list[i]}\n')
        new_file.append("# Bad prediction method(s)\n")
        for beam in range(n_beam):
            new_file.append(f'{pred_list[i*n_beam+beam]}\n')
        new_file.append("\n")

    with open(path_concat_file_dest, 'w') as f:
        for line in new_file:
            f.write(line)
else:
    print("There is not the same among of methods inside the files")