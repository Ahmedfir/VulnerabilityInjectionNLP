import re

def CWE190(line):
    #line = 'public void bad ( ) throws Throwable { int data ; if ( privateFive == 5 ) { data = Integer.MAX_VALUE ; } else { data = 0 ; } if ( privateFive == 5 ) { int result = ( int ) ( data+1 ) ; IO.writeLine ( "result: "+result ) ; } }'
    #line = 'public void bad ( ) throws Throwable { int data ; switch ( 6 ) { case 6 : data = ( new SecureRandom ( ) ).nextInt ( ) ; break ; default : data = 0 ; break ; } switch ( 7 ) { case 7 : data++ ; int result = ( int ) ( data ) ; IO.writeLine ( "result: "+result ) ; break ; default : IO.writeLine ( "Benign, fixed string" ) ; break ; } }'
    line = re.split('({|}|;)',line)

    type_data = {
        'int data' : 'data = Integer.MAX_VALUE;BigInteger data2 = BigInteger.valueOf(data);',
        'byte data': 'data = Byte.MAX_VALUE;BigInteger data2 = BigInteger.valueOf(data);',
        'float data': 'data = Float.MAX_VALUE;BigInteger data2 = BigInteger.valueOf(data);',
        'short data': 'data = Short.MAX_VALUE;BigInteger data2 = BigInteger.valueOf(data);',
        'long data': 'data = Long.MAX_VALUE;BigInteger data2 = BigInteger.valueOf(data);',
    }

    test_patchs = {
        'data+1' : 'BigInteger result2 = data2.add(BigInteger.valueOf(1)); IO.writeLine("<CWE190>" + BigInteger.valueOf(result).equals(result2));IO.writeLine("value of result : " + result);IO.writeLine("value of result2 : " + result2);',
        'data * 2' : 'BigInteger result2 = data2.multiply(BigInteger.valueOf(2));; IO.writeLine("<CWE190>" + BigInteger.valueOf(result).equals(result2));IO.writeLine("value of result : " + result);IO.writeLine("value of result2 : " + result2);',
        'data++' : 'BigInteger result2 = data2.add(BigInteger.valueOf(1)); IO.writeLine("<CWE190>" + BigInteger.valueOf(result).equals(result2));IO.writeLine("value of result : " + result);IO.writeLine("value of result2 : " + result2);',
        '++ data' : 'BigInteger result2 = data2.add(BigInteger.valueOf(1)); IO.writeLine("<CWE190>" + BigInteger.valueOf(result).equals(result2));IO.writeLine("value of result : " + result);IO.writeLine("value of result2 : " + result2);',
        'data * data' : 'BigInteger result2 = data2.multiply(data2); IO.writeLine("<CWE190>" + BigInteger.valueOf(result).equals(result2));IO.writeLine("value of result : " + result);IO.writeLine("value of result2 : " + result2);'
    }

    test_to_add = []
    data_initialisation = None
    for i, instr in enumerate(line):
        for key,value in test_patchs.items():
            if (key in instr):
                test_to_add.append([i,value])
        for key,value in type_data.items():
            if (key in instr):
                data_initialisation = value

    for test in test_to_add:
        if line[test[0]-2].startswith(" if"): # If a potential check exists, initialise data before
            line.insert(test[0]-2,data_initialisation)
        else :
            line.insert(test[0], data_initialisation)
        line.insert(test[0]+5, test[1])

    new_line = ""
    for elem in line:
        new_line += elem

    return(new_line)

def CWE191(line):

    type_data = {
        'int data': 'data = Integer.MIN_VALUE;BigInteger data2 = BigInteger.valueOf(data);',
        'byte data': 'data = Byte.MIN_VALUE;BigInteger data2 = BigInteger.valueOf(data);',
        'float data': 'data = Float.MIN_VALUE;BigInteger data2 = BigInteger.valueOf(data);',
        'short data': 'data = Short.MIN_VALUE;BigInteger data2 = BigInteger.valueOf(data);',
        'long data': 'data = Long.MIN_VALUE;BigInteger data2 = BigInteger.valueOf(data);',
    }

    test_patchs = {
        'data - 1' : 'BigInteger result2 = data2.subtract(BigInteger.valueOf(1)); IO.writeLine("<CWE190>" + BigInteger.valueOf(result).equals(result2));IO.writeLine("value of result : " + result);IO.writeLine("value of result2 : " + result2);',
        'data * 2' : 'BigInteger result2 = data2.multiply(BigInteger.valueOf(2));; IO.writeLine("<CWE190>" + BigInteger.valueOf(result).equals(result2));IO.writeLine("value of result : " + result);IO.writeLine("value of result2 : " + result2);',
        'data --' : 'BigInteger result2 = data2.add(BigInteger.valueOf(1)); IO.writeLine("<CWE190>" + BigInteger.valueOf(result).equals(result2));IO.writeLine("value of result : " + result);IO.writeLine("value of result2 : " + result2);',
        '-- data' : 'BigInteger result2 = data2.subtract(BigInteger.valueOf(1)); IO.writeLine("<CWE190>" + BigInteger.valueOf(result).equals(result2));IO.writeLine("value of result : " + result);IO.writeLine("value of result2 : " + result2);'
    }

    line = re.split('({|}|;)', line)

    test_to_add = []
    data_initialisation = None
    for i, instr in enumerate(line):
        for key,value in test_patchs.items():
            if (key in instr):
                test_to_add.append([i,value])
        for key,value in type_data.items():
            if (key in instr):
                data_initialisation = value

    #print(line)
    for test in test_to_add:
        if line[test[0]-2].startswith(" if"): # If a potential check exists, initialise data before
            line.insert(test[0]-2,data_initialisation)
        else :
            line.insert(test[0], data_initialisation)
        line.insert(test[0]+5, test[1])

    new_line = ""
    for elem in line:
        new_line += elem

    return(new_line)

