import subprocess
import os

OS = "linux"

def rename_file(folder, current_filename, new_filename):
    os.rename(os.path.join(folder, current_filename),
              os.path.join(folder, new_filename))


def decompile_seed(file_path, dest_folder_path,fernflower_jar_path):
    command = f"java -jar " \
              f"{fernflower_jar_path} " \
              f"{file_path} " \
              f"{dest_folder_path}"
    result_command = subprocess.check_output(command, shell=True)
    for x in result_command.decode('ascii').split('\n'):
        print(x)

    if OS == "linux":
        filename = file_path.split('/')[-1:][0][:-6]
    else:
        filename = file_path.split('\\')[-1:][0][:-6]

    new_filename = f"{filename}_seed.java"
    filename += ".java"
    rename_file(dest_folder_path, filename, new_filename)


def decompile_file(file_path, dest_folder_path, i_mutant,fernflower_jar_path):
    command = f"java -jar " \
              f"{fernflower_jar_path} " \
              f"{file_path} " \
              f"{dest_folder_path}"
    result_command = subprocess.check_output(command, shell=True)
    for x in result_command.decode('ascii').split('\n'):
        print(x)

    if OS == "linux":
        filename = file_path.split('/')[-1:][0][:-6]
    else:
        filename = file_path.split('\\')[-1:][0][:-6]

    filename += ".java"
    new_filename = f"{filename[:-5]}_mutant{i_mutant}.java"
    rename_file(dest_folder_path, filename, new_filename)


def decompile_folder(folder_path, dest_folder_path,fernflower_jar_path):
    """
    Decompile all the .class file inside a folder
    :param folder_path:
    :return:
    """
    i_mutant = 0  # to not overwrite the mutants (they all have the name of the seed class file)
    os.chdir(folder_path)
    for root, dirs, files in os.walk("."):
        for file in files:
            if file.endswith(".class") and file != "Test1.class" and file != "Main.class":
                print(f"### {file} has been found. It is gonna be decompiled ###")
                source_file = os.path.join(root, file)
                decompile_file(source_file, dest_folder_path, i_mutant,fernflower_jar_path)
                i_mutant += 1


def main():
    print("### decompile_class_file.py has been launched.")


    #path_seed = "C:\\Users\\benjamin.petit\\Documents\\confuzziongit\\vulnerability_1\\CWE369_Divide_by_Zero__int_Property_divide_01.class"
    #mutants_folder_path = "C:\\Users\\benjamin.petit\\Documents\\confuzziongit\\myResultFolder"
    #mutants_decompiled_folder_path = "C:\\Users\\benjamin.petit\\docker\\Confuzzion\\myResultFolder_decompiled_mutants"
    #fernflower_jar_path = "C:\\Users\\benjamin.petit\\Documents\\Fernflower_decompiler_1.8\\fernflower-master\\target\\fernflower.jar"

    fernflower_jar_path = "/mnt/docker/fernflower-master/target/fernflower.jar"
    path_seed = "/mnt/docker/confuzzion_tool/vulnerability_1/CWE190_Integer_Overflow__int_Environment_add_01.class"
    mutants_folder_path = "/mnt/docker/confuzzion_tool/myResultFolder"
    mutants_decompiled_folder_path = "/mnt/docker/Confuzzion/1_decompiled_mutants"

    # Decompile the seed
    print(f"# Decompile the seed from {path_seed}")
    decompile_seed(path_seed, mutants_decompiled_folder_path,fernflower_jar_path)
    # Decompile the mutants
    print(f"# Decompile the mutants in {mutants_decompiled_folder_path}")
    decompile_folder(mutants_folder_path, mutants_decompiled_folder_path,fernflower_jar_path)


if __name__ == '__main__':
    main()
