import logging
import os
import subprocess
import shutil
from distutils.dir_util import copy_tree


# TO BE LAUNCHED FROM LINUX

def find_seed_folder_path(src_folder_path):
    subfolders = [f.path for f in os.scandir(src_folder_path) if f.is_dir()]
    return [x for x in subfolders if x.endswith("seed")][0]


def create_patch(seed_bad_txt_path, mutant_bad_txt_path):
    """
    Create the patch between the seed bad and seed mutant
    that will be apply to the seed good method to obtain the mutant good method
    """
    print(f"# Create patch")
    command = f"diff {seed_bad_txt_path} {mutant_bad_txt_path} > patch_bad.patch"

    try:
        os.system(command)
    except subprocess.CalledProcessError as e:
        raise RuntimeError("command '{}' return with error (code {}): {}".format(e.cmd, e.returncode, e.output))


def apply_patch(seed_good_txt_path):
    print(f"# Apply patch on {seed_good_txt_path}")
    command = f"patch {seed_good_txt_path} patch_bad.patch -l"
    print(command)
    try:
        os.system(command)
    except subprocess.CalledProcessError as e:
        raise RuntimeError("command '{}' return with error (code {}): {}".format(e.cmd, e.returncode, e.output))


def apply_patch_to_goods(list_of_goods):
    print(f"## Files to patch : {list_of_goods}")
    for good_file in list_of_goods:
        apply_patch(good_file)


def main():
    print("### insert_mutation_in_good_method.py has been launched.")
    # src_folder_path = "/mnt/docker/Confuzzion/myResultFolder_decompiled_mutants_splitted"
    # seed_folder_path = find_seed_folder_path(src_folder_path)
    # dest_folder_path = "/mnt/docker/Confuzzion/myResultFolder_decompiled_mutants_splitted_good_ok"
    # bad_seed_path = os.path.join(seed_folder_path, "bad.txt")

    src_folder_path = "/mnt/docker/Confuzzion/2_splitted_decompiled_mutants"
    dest_folder_path = "/mnt/docker/Confuzzion/3_patched_splitted_decompiled_mutants"


    # Copy the src folder to the dest folder to keep the original files in the src folder
    print("# Copy the src folder to the dest folder to keep the original files in the src folder")
    copy_tree(src_folder_path, dest_folder_path)

    os.chdir(dest_folder_path)
    folders_to_explore = os.listdir()

    # Create and apply patch
    print("# Create and apply patch")
    for folder in folders_to_explore:
        print(f"### Current folder : {folder}")
        os.chdir(folder)
        current_folder_files = os.listdir()
        seed_folder = "_".join(folder.split("_")[:-1]) + "_seed"
        bad_seed_path = os.path.join(dest_folder_path,seed_folder, "bad.txt")
        create_patch(bad_seed_path, "bad.txt")

        if 'bad.txt' in current_folder_files:
            current_folder_files.remove("bad.txt")
            current_folder_files = [file for file in current_folder_files if file.endswith(".txt")]
            apply_patch_to_goods(current_folder_files)
        else:
            print(f'bad not present in folder {folder}')

        os.chdir(dest_folder_path)


    # Remove mutants where the patch sent an error
    print("# Remove mutants where the patch sent an error")
    mutant_folders_to_remove = []
    os.chdir(dest_folder_path)
    logging.info(str(len(os.listdir())) + " mutants have been created")
    for folder in os.listdir():
        os.chdir(folder)
        current_folder_files = os.listdir()
        for file in current_folder_files:
            if file.endswith(".rej"):
                mutant_folders_to_remove.append(folder)
                break # To not add multiple times the same folder
        os.chdir(dest_folder_path)
    print(str(len(mutant_folders_to_remove)) + " mutants to remove (error while applying patch)")
    logging.info(str(len(mutant_folders_to_remove)) + " mutants to remove (error while applying patch)")


    for folders_to_remove in mutant_folders_to_remove:
        try:
            shutil.rmtree(folders_to_remove)
        except OSError as e:
            print("Error: %s : %s" % (folders_to_remove, e.strerror))


if __name__ == "__main__":
    main()
