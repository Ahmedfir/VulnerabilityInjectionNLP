import os
import shutil
import re
from distutils.dir_util import copy_tree
import confuzzion.compile_and_run_mutant

OS = "Windows"
def copy_file(file_path, dest_folder):
    shutil.copy(file_path, dest_folder)


def remove_file(file_path):
    os.remove(file_path)


def copy_content_folder(src_folder_path, dest_folder_path):
    copy_tree(src_folder_path, dest_folder_path)


def remove_content_folder(folder_path):
    os.chdir(folder_path)
    for filename in os.listdir(folder_path):
        file_path = os.path.join(folder_path, filename)
        try:
            if os.path.isfile(file_path) or os.path.islink(file_path):
                os.unlink(file_path)
            elif os.path.isdir(file_path):
                shutil.rmtree(file_path)
        except Exception as e:
            print('Failed to delete %s. Reason: %s' % (file_path, e))


def is_word_in_file(word, file_path):
    with open(file_path, 'r') as f:
        for line in f:
            if word in line:
                return True
    return False

def replace_word_in_file(file_path, from_word, to_word):
    print(f"replacing {from_word} to {to_word}")
    with open(file_path, 'r') as file:
        filedata = file.read()

    filedata = filedata.replace(from_word, to_word)

    with open(file_path, 'w') as file:
        file.write(filedata)


def compile_one_test_case(filename_java):
    """
    It's suppose that we currently are in the folder where is the mutant
    :param mutant_name_java:
    :return:
    """
    separator = ";"
    if OS == "linux":
        separator = ":"

    print("Compile " + filename_java)
    command = f"javac -cp lib/servlet-api.jar{separator}" \
              f"lib/commons-lang-2.5.jar{separator}" \
              f"lib/commons-codec-1.5.jar{separator}" \
              f"lib/javamail-1.4.4.jar " \
              f"testcasesupport/*.java " \
              f"{filename_java}"
    #print(command)
    os.system(command)

def modify_line_in_java_file(java_file_path, line_content, new_method_content):
    with open(java_file_path, 'r') as file:
        content1 = []
        content2 = []
        beginning_of_file = True
        count_brackets = 0
        start_method = False
        for line in file:
            if re.search(line_content, line):
                beginning_of_file = False

            elif start_method == False:
                if beginning_of_file == True:
                    content1.append(line)
                else:
                    content2.append(line)

            if re.search("{", line):
                count_brackets = count_brackets + 1
            if re.search("}", line):
                count_brackets = count_brackets - 1
                if (count_brackets == 0 and start_method == True):
                    start_method = False
    with open(java_file_path, 'w') as file:
        towrite = "".join(content1)
        towrite += new_method_content
        towrite += "".join(content2)
        file.write(towrite)
"""
folder = "C:/Users/benjamin.petit/docker/Juliet_Test_Suite_5CWE_req_only_InferOK_compiled_without_package"
os.chdir(folder)
for file in os.listdir():
    if file.endswith(".java"):
        confuzzion.compile_and_run_mutant.modify_line_in_java_file(os.path.join(folder,file), "package", "")
"""
