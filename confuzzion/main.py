import os
import shutil
from distutils.dir_util import copy_tree
import logging

import decompile_class_file
import split_bad_good_method
import insert_mutation_in_good_method
import compile_and_run_mutant


LOG_FILE_PATH = '/mnt/docker/Confuzzion/LOG_FILE.log'

# Need the lib and testcasesupport folder in the folder 4_final_mutants
def main(all_mutants_folder_path, splitted_decompiled_mutant_folder_path):
    logging.info("SPLITING BAD AND GOOD METHODS OF ALL MUTANTS")
    split_bad_good_method.main(all_mutants_folder_path, splitted_decompiled_mutant_folder_path)

    logging.info("INSERTION OF THE MUTATIONS INSIDE THE GOOD METHODS")
    insert_mutation_in_good_method.main()

    logging.info("COMPILE AND RUN THE MUTANTS")
    compile_and_run_mutant.main()


def modify_seed(java_file_path):
    compile_and_run_mutant.modify_line_in_java_file(java_file_path, "package", "")


def compile_seeds(seed_folder_path):
    compile_and_run_mutant.compile_all_mutants(seed_folder_path)


def prepare_seeds(seed_folder_path):
    os.chdir(seed_folder_path)
    for file in os.listdir():
        if file.endswith(".java"):
            modify_seed(file)
    compile_seeds(seed_folder_path)


def copy_file(file_path, dest_folder):
    shutil.copy(file_path, dest_folder)


def remove_file(file_path):
    os.remove(file_path)


def execute_confuzzion(current_seed_folder_path, temp_mutant_folder_path, target_folder_path):
    os.chdir(target_folder_path)
    command = 'java -Dmethod=bad -jar confuzzion-1.0-SNAPSHOT-jar-with-dependencies.jar ' \
              '-t java.lang.String: ' \
              f'-o "{temp_mutant_folder_path}" ' \
              '-l 100 ' \
              '--classes-limit 2 ' \
              f'-s {current_seed_folder_path} ' \
              '-i 50 ' \
              '--jvm "/usr/bin/java" ' \
              '--java-version 8'
    print(command)
    os.system(command)


def copy_content_folder(src_folder_path, dest_folder_path):
    copy_tree(src_folder_path, dest_folder_path)


def remove_content_folder(folder_path):
    os.chdir(folder_path)
    for filename in os.listdir(folder_path):
        file_path = os.path.join(folder_path, filename)
        try:
            if os.path.isfile(file_path) or os.path.islink(file_path):
                os.unlink(file_path)
            elif os.path.isdir(file_path):
                shutil.rmtree(file_path)
        except Exception as e:
            print('Failed to delete %s. Reason: %s' % (file_path, e))

def is_word_in_file(word, file_path):
    with open(file_path, 'r') as f:
        for line in f:
            if word in line:
                return True
    return False

def main_create_all_mutant(seeds_folder_path, all_mutants_folder_path, temp_mutant_folder_path,
                           current_seed_folder_path, target_folder_path, fernflower_jar_path):
    logging.info("Creation of the seeds")
    prepare_seeds(seeds_folder_path)
    logging.info("Beginning of the mutations")
    os.chdir(seeds_folder_path)
    for file in os.listdir():
        # Verify that this seed has not already been mutated (in case of relaunching the mutation)
        if file.endswith(".class") and not is_word_in_file(file,LOG_FILE_PATH):
            logging.info(f"Mutation of the file {file}")
            copy_file(file, current_seed_folder_path)

            try :
                execute_confuzzion(current_seed_folder_path, temp_mutant_folder_path, target_folder_path)
                os.chdir(seeds_folder_path)

                decompile_class_file.decompile_seed(file, all_mutants_folder_path, fernflower_jar_path)
                decompile_class_file.decompile_folder(temp_mutant_folder_path, all_mutants_folder_path,
                                                      fernflower_jar_path)

            except :
                print("Problem while creating mutant")
                logging.error("Problem while creating mutant")

            remove_content_folder(temp_mutant_folder_path)
            remove_file(os.path.join(current_seed_folder_path, file))
            os.chdir(seeds_folder_path)


if __name__ == "__main__":

    logging.basicConfig(filename=LOG_FILE_PATH, encoding='utf-8', level=logging.DEBUG,
                        format='%(asctime)s %(message)s', datefmt='%d/%m/%Y %I:%M:%S %p')

    # BEFORE PASSAGE INTO CONFUZZION
    confuzzion_tool_path = "/mnt/docker/confuzzion_tool"
    seeds_folder_path = f"{confuzzion_tool_path}/all_seeds_folder"
    temp_mutant_folder_path = f"{confuzzion_tool_path}/myResultFolder"
    current_seed_folder_path = f"{confuzzion_tool_path}/vulnerability_1"
    target_folder_path = f"{confuzzion_tool_path}/target"
    all_mutants_folder_path = "/mnt/docker/Confuzzion/1_decompiled_mutants"
    fernflower_jar_path = "/mnt/docker/fernflower-master/target/fernflower.jar"

    """
    logging.info("PART 0 : CLEANING FOLDERS")
    remove_content_folder("/mnt/docker/Confuzzion/1_decompiled_mutants")
    remove_content_folder("/mnt/docker/Confuzzion/2_splitted_decompiled_mutants")
    remove_content_folder("/mnt/docker/Confuzzion/3_patched_splitted_decompiled_mutants")
    final_mutant_folder_path = "/mnt/docker/Confuzzion/4_final_mutants"
    for file in os.listdir(final_mutant_folder_path):
        if file.endswith(".java") or file.endswith(".class"):
            remove_file(os.path.join(final_mutant_folder_path,file))
   """


    logging.info("PART 1 : CREATION OF ALL MUTANTS")
    main_create_all_mutant(seeds_folder_path, all_mutants_folder_path, temp_mutant_folder_path,
                           current_seed_folder_path, target_folder_path, fernflower_jar_path)

    # AFTER PASSAGE INTO CONFUZZION


    logging.info("PART 2 : MODIFICATION OF ALL MUTANTS")
    splitted_decompiled_mutant_folder_path = "/mnt/docker/Confuzzion/2_splitted_decompiled_mutants"
    main(all_mutants_folder_path,splitted_decompiled_mutant_folder_path)
