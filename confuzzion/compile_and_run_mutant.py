import os
import re
import shutil
from distutils.dir_util import copy_tree
import logging

OS = "linux"


def compile_one_mutant(mutant_name_java):
    """
    It's suppose that we currently are in the folder where is the mutant
    :param mutant_name_java:
    :return:
    """
    separator = ";"
    if OS == "linux":
        separator = ":"

    logging.info("Compilation of " + mutant_name_java)
    print("Compile " + mutant_name_java)
    command = f"javac -cp lib/servlet-api.jar{separator}" \
              f"lib/commons-lang-2.5.jar{separator}" \
              f"lib/commons-codec-1.5.jar{separator}" \
              f"lib/javamail-1.4.4.jar " \
              f"testcasesupport/*.java " \
              f"{mutant_name_java}"
    #print(command)
    os.system(command)


def compile_all_mutants(path_to_mutants_folder):
    print("Compilation of all java file in the folder : ")
    print(path_to_mutants_folder)

    LOG_FILE_PATH = '/mnt/docker/Confuzzion/LOG_FILE.log'
    with open(LOG_FILE_PATH, 'r') as f:
        log_file = f.read().splitlines()


    os.chdir(path_to_mutants_folder)
    for file in [file for file in os.listdir() if file.endswith(".java")]:
        is_in_log_file = False
        for line in log_file:
            if file in line:
                print(f"File {file} has already be tried to be compiled")
                is_in_log_file = True
                break
        if not is_in_log_file :
            print(f"File {file} can be compiled")
            compile_one_mutant(file)


def run_one_mutant(mutant_name_class, confuzzion_path):
    separator = ";"
    if OS == "linux":
        separator = ":"

    command = f"java -cp " \
              f"{confuzzion_path}/target/classes{separator}" \
              f"{confuzzion_path}/vulnerability_1{separator}" \
              f". " \
              f"{mutant_name_class[:-6]}"
    print(command)
    os.system(command)


def run_all_class_file(path_to_mutants_folder, confuzzion_path):
    print("Execution of the compiled files")
    os.chdir(path_to_mutants_folder)
    for file in os.listdir():
        if file.endswith(".class"):
            run_one_mutant(file, confuzzion_path)


def modify_line_in_java_file(java_file_path, line_content, new_method_content):
    with open(java_file_path, 'r') as file:
        content1 = []
        content2 = []
        beginning_of_file = True
        count_brackets = 0
        start_method = False
        for line in file:
            if re.search(line_content, line):
                beginning_of_file = False

            elif start_method == False:
                if beginning_of_file == True:
                    content1.append(line)
                else:
                    content2.append(line)

            if re.search("{", line):
                count_brackets = count_brackets + 1
            if re.search("}", line):
                count_brackets = count_brackets - 1
                if (count_brackets == 0 and start_method == True):
                    start_method = False
    with open(java_file_path, 'w') as file:
        towrite = "".join(content1)
        towrite += new_method_content
        towrite += "".join(content2)
        file.write(towrite)

def modify_method_in_java_file(java_file_path, method_name, new_method_content):
    with open(java_file_path, 'r') as file:
        content1 = []
        content2 = []
        beginning_of_file = True
        count_brackets = 0
        start_method = False
        for line in file:
            if re.search(f"void {method_name}", line):
                start_method = True
                beginning_of_file = False
                count_brackets = 0

            elif start_method == False:
                if beginning_of_file == True:
                    content1.append(line)
                else:
                    content2.append(line)

            if re.search("{", line):
                count_brackets = count_brackets + 1
            if re.search("}", line):
                count_brackets = count_brackets - 1
                if (count_brackets == 0 and start_method == True):
                    start_method = False
    with open(java_file_path, 'w') as file:
        towrite = "".join(content1)
        towrite += new_method_content
        towrite += "".join(content2)
        file.write(towrite)

def modify_main_class_according_to_name_of_file(java_file_path):
    with open(java_file_path, 'r') as file:
        content1 = []
        content2 = []
        beginning_of_file = True
        new_main_class = os.path.splitext(java_file_path)[0]
        # new_main_class = new_main_class.split("\\")[-1]
        new_main_class = new_main_class.split("/")[-1]

        for line in file:
            if line.startswith("public class"):
                if "Servlet" in new_main_class:
                    content1.append("public class " + new_main_class + " extends AbstractTestCaseServlet { \n")
                else :
                    content1.append("public class " + new_main_class + " extends AbstractTestCase { \n")
                beginning_of_file = False
            else:
                if beginning_of_file == True:
                    content1.append(line)
                else:
                    content2.append(line)

    with open(java_file_path, 'w') as file:
        towrite = "".join(content1)
        towrite += "".join(content2)
        file.write(towrite)


def insert_methods_inside_initial_file(folder_mutants_java_path, folder_mutants_splitted_good_ok_path,
                                       dest_folder_path):
    # Copy files from folder
    # C:\Users\benjamin.petit\docker\Confuzzion\myResultFolder_decompiled_mutants
    # dans dossier dest
    copy_tree(folder_mutants_java_path, dest_folder_path)

    # For each java mutant
    # we need to modify the value of the "var" variables in the bad method
    # we need to add the mutations in the good method
    # the content of these methods is in a folder in "folder_mutants_splitted_good_ok_path"

    # For each java mutant
    os.chdir(dest_folder_path)
    for java_file in os.listdir():
        if java_file.endswith(".java"):
            java_file_path = os.path.join(dest_folder_path, java_file)
            correponding_folder_name = java_file[:-5]
            folder_with_new_methods = os.path.join(folder_mutants_splitted_good_ok_path, correponding_folder_name)

            # For each method to modify (bad.txt, goodB2G.txt,...)
            try:
                os.chdir(folder_with_new_methods)
                for method_to_modify in os.listdir():
                    if method_to_modify.endswith(".txt"):
                        method_name = os.path.splitext(method_to_modify)[0]  # remove the .txt
                        with open(method_to_modify) as method_file:
                            new_method_content = method_file.read()
                            modify_method_in_java_file(java_file_path, method_name, new_method_content)
                modify_main_class_according_to_name_of_file(java_file_path)
            except FileNotFoundError:
                print(
                    f"Folder {folder_with_new_methods} has been removed during patching. it's gonna be removed here too")
                try:
                    os.remove(os.path.join(dest_folder_path, java_file))
                except OSError as e:
                    print("Error: %s : %s" % (java_file, e.strerror))


def main():
    print("### compile_and_run_mutant.py has been launched.")

    """
    folder_mutants_java_path = "C:\\Users\\benjamin.petit\\docker\\Confuzzion\\myResultFolder_decompiled_mutants"
    folder_patched_splitted_mutants = "C:\\Users\\benjamin.petit\\docker\\Confuzzion\\myResultFolder_decompiled_mutants_splitted_good_ok"
    dest_folder_path = "C:\\Users\\benjamin.petit\\docker\\Confuzzion\\final_mutants"
    confuzzion_path = "C:/Users/benjamin.petit/Documents/confuzziongit"
    """
    folder_mutants_java_path = "/mnt/docker/Confuzzion/1_decompiled_mutants"
    folder_patched_splitted_mutants = "/mnt/docker/Confuzzion/3_patched_splitted_decompiled_mutants"
    dest_folder_path = "/mnt/docker/Confuzzion/4_final_mutants"
    confuzzion_path = "/mnt/docker/confuzzion_tool"

    print(f"# Insertion of methods inside initial files (previously copied in the {dest_folder_path} folder)")
    insert_methods_inside_initial_file(folder_mutants_java_path,
                                       folder_patched_splitted_mutants,
                                       dest_folder_path)

    print(f"# Compile all the mutants")
    compile_all_mutants(dest_folder_path)
    print(f"# Run the compiled mutants")
    #run_all_class_file(dest_folder_path, confuzzion_path)


if __name__ == "__main__":
    main()

