import logging
import os
import re
import shutil
import set_seed_var_value_in_mutant


def get_bad_method(filename, dest_folder_path, bad_seed_path):
    """
    Get the bad method from the java file
    And modify it to match the "var" values of the initial seed
    :param filename:
    :param dest_folder_path:
    :param bad_seed_path:
    :return:
    """
    try:
        os.mkdir(os.path.join(dest_folder_path, os.path.splitext(filename)[0]))
    except:
        pass

    textfile = open(filename, 'r')
    bad_method = 'void bad\('
    words_to_detect = f'{bad_method}'

    start_count = False  # Use to know if we entered a good/bad method or another one (like main)
    count_brackets = 0
    all_lines = ""

    for line in textfile:
        all_lines += line
        if re.search(words_to_detect, line):
            start_count = True
            words_detected = re.findall(words_to_detect, line)
            f = open(os.path.join(dest_folder_path,
                                  os.path.splitext(filename)[0],
                                  f'{words_detected[0][5:-1]}.txt'),
                     "w")
            all_lines = line
            count_brackets = 0
        if re.search("{", line):
            count_brackets = count_brackets + 1
        if re.search("}", line):
            count_brackets = count_brackets - 1
            if (count_brackets == 0 and start_count == True):
                start_count = False
                f.write(all_lines)
                f.close()
    textfile.close()

    print(filename)
    # Modify the mutant to match the "var" values of the initial seed
    set_seed_var_value_in_mutant.main_set_seed_var_value_in_mutant(bad_seed_path, os.path.join(dest_folder_path, (os.path.splitext(filename)[0]),"bad.txt"))


def split_file(filename, dest_folder_path):
    """
    Split the bad and the good methods (B2G only)
    :param filename:
    :param dest_folder_path:
    :return:
    """
    # Cr√©er le dossier du test case
    try:
        os.mkdir(os.path.join(dest_folder_path, os.path.splitext(filename)[0]))
    except:
        pass

    textfile = open(filename, 'r')
    bad_method = 'void bad\('
    second_good_method_B2G = 'void good[0-9]+\(|void goodB2G[0-9]*\('
    words_to_detect = f'{bad_method}|{second_good_method_B2G}'

    start_count = False  # Use to know if we entered a good/bad method or another one (like main)
    count_brackets = 0
    all_lines = ""

    for line in textfile:
        all_lines += line
        if re.search(words_to_detect, line):
            start_count = True
            words_detected = re.findall(words_to_detect, line)
            f = open(os.path.join(dest_folder_path,
                                  os.path.splitext(filename)[0],
                                  f'{words_detected[0][5:-1]}.txt'),
                     "w")
            all_lines = line
            count_brackets = 0
        if re.search("{", line):
            count_brackets = count_brackets + 1
        if re.search("}", line):
            count_brackets = count_brackets - 1
            if (count_brackets == 0 and start_count == True):
                start_count = False
                f.write(all_lines)
                f.close()

    textfile.close()


def split_folder(src_folder_path, dest_folder_path):
    os.chdir(src_folder_path)

    # Split the methods of the seed file
    seed_files = [folder for folder in os.listdir() if folder.endswith("seed.java")]
    for file in seed_files:
        split_file(file, dest_folder_path)

    # Get the bad methods, modify them and get the seed good method (which will be mutated later)

    nb_mutants = 0
    for file in os.listdir():
        if file.endswith(".java") and not file.endswith("seed.java"):
            # Just get the bad method and modify it
            try :
                seed_folder = "_".join(file.split("_")[:-1]) + "_seed"
                seed_bad_method_file_path = os.path.join(dest_folder_path, seed_folder, "bad.txt")
                get_bad_method(file, dest_folder_path,seed_bad_method_file_path)
                # And then copy the goods from the seed

                for good_file in os.listdir(os.path.join(dest_folder_path,seed_folder)):
                    if not good_file.endswith("bad.txt"):
                        shutil.copy(os.path.join(dest_folder_path,seed_folder,good_file),
                                    os.path.join(dest_folder_path,os.path.splitext(file)[0]))
                nb_mutants += 1
            except :
                print(f"error with file {file}")
                logging.info(f"Error with file {file}")
                pass
    print(f"{nb_mutants} mutants have been splitted ")

def main(src_folder_path,dest_folder_path):
    print("### split_bad_good_method.py has been launched.")

    # Split the seed
    # Get the bad method of the mutant and copy the good method from the seed
    print("# Split the bad mutant method and copy the good method from the seed")
    split_folder(src_folder_path, dest_folder_path)

if __name__ == '__main__':
    #src_folder_path = "C:\\Users\\benjamin.petit\\docker\\Confuzzion\\myResultFolder_decompiled_mutants"
    #dest_folder_path = "C:\\Users\\benjamin.petit\\docker\\Confuzzion\\myResultFolder_decompiled_mutants_splitted"

    src_folder_path = "/mnt/docker/Confuzzion/1_decompiled_mutants"
    dest_folder_path = "/mnt/docker/Confuzzion/2_splitted_decompiled_mutants"

    main(src_folder_path,dest_folder_path)
