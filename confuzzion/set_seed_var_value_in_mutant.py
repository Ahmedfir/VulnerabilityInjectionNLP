from difflib import Differ
import re


def get_index_positions(list_of_elems, element):
    # To find the '^' positions in the 'differ' command
    ''' Returns the indexes of all occurrences of give element in
    the list- listOfElements '''
    index_pos_list = []
    index_pos = 0
    while True:
        try:
            # Search for item in list from indexPos to the end of list
            index_pos = list_of_elems.index(element, index_pos)
            # Add the index position in list
            index_pos_list.append(index_pos)
            index_pos += 1
        except ValueError as e:
            break
    return index_pos_list


def associate_seed_and_mutant_VAR_value(list_of_value):
    """
    From [['1'], ['3'], ['2'], ['100'], ['1', '2'], ['3', '100'], ['4'], ['2'], ['4'], ['2']]
    (that match the value of each VAR)
    Get {'1' : '3', '2' : '100', '4' : '2'}
    """
    associated_var_value = {}
    for val_seed, val_mutants in zip(list_of_value[0::2], list_of_value[1::2]):
        for i, _ in enumerate(val_seed):
            # Remove some associations like 1 => 2.trim()
            if re.search('^[0-9]+$', val_seed[i]) and re.search('^[0-9]+$', val_mutants[i]):
                associated_var_value[val_seed[i]] = val_mutants[i]
    return associated_var_value


def replace_word_in_file(file_path, from_word, to_word):
    print(f"replacing {from_word} to {to_word}")
    with open(file_path, 'r') as file:
        filedata = file.read()

    filedata = filedata.replace(from_word, to_word)

    with open(file_path, 'w') as file:
        file.write(filedata)


def replace_word_in_file2(file_path, from_word, to_word):
    with open(file_path, 'r+') as f:
        text = f.read()
        text = re.sub(f'({from_word})+(?![0-9])', to_word, text)
        f.seek(0)
        f.write(text)
        f.truncate()


def find_VAR_values(bad_seed_path, bad_mutant_path):
    """
    # Find all '^' symbols. Meening we have on occurence of val that must be replaced
    # ex : val1
    #         ^
    #      val200
    #         ^^^
    # So I know that on the previous list , at this position I have the number X of the valX (corresponding
    # to the valY in the 2 next list
    """

    with open(bad_seed_path) as file_1, open(bad_mutant_path) as file_2:
        differ = Differ()

        diff = differ.compare(file_1.readlines(), file_2.readlines())
        list_diff = [line for line in diff]

        all_val_value_positions = []
        for line in list_diff:
            all_val_value_positions.append(get_index_positions(line, '^'))

        # Remove the first list, to get the position of the values directly
        all_val_value_positions = all_val_value_positions[1:]

        val_var_to_replace = []
        for lineindex, position_val_value in enumerate(all_val_value_positions):
            temp = ""
            last_position = -2
            val_var_to_replace_temp = []
            for position in position_val_value:
                if position != last_position + 1:  # Meaning that we are on another var value
                    if temp != "":
                        val_var_to_replace_temp.append(temp)
                        temp = ""
                temp += str(list_diff[lineindex][position])
                last_position = position
            if temp != '':
                val_var_to_replace_temp.append(temp)
            if val_var_to_replace_temp:
                val_var_to_replace.append(val_var_to_replace_temp)



    return val_var_to_replace


def main_set_seed_var_value_in_mutant(bad_seed_path, bad_mutant_path):
    val_var_to_replace = find_VAR_values(bad_seed_path, bad_mutant_path)
    associated_var_value = associate_seed_and_mutant_VAR_value(val_var_to_replace)
    print(associated_var_value)

    # I must take to not do var1 => var2, var2 => var3 ! I must have an intermediate iteration
    for var_seed_value, var_mutant_value in associated_var_value.items():
        replace_word_in_file2(bad_mutant_path, "var" + str(var_mutant_value), "vartemp" + str(var_mutant_value))

    # Remove future val_seed already present in the mutant
    new_var_value = "a"
    for var_seed_value, var_mutant_value in associated_var_value.items():
        replace_word_in_file2(bad_mutant_path, "var" + str(var_seed_value), "var" + str(new_var_value))
        new_var_value += "a"

    for var_seed_value, var_mutant_value in associated_var_value.items():
        replace_word_in_file2(bad_mutant_path, "vartemp" + str(var_mutant_value), "var" + str(var_seed_value))


if __name__ == "__main__":
    bad_seed_path = "C:\\Users\\benjamin.petit\\docker\\Confuzzion\\myResultFolder_decompiled_mutants_splitted_good_ok\\CWE369_Divide_by_Zero__int_Property_divide_01_seed\\bad.txt"
    bad_mutant_path = "C:\\Users\\benjamin.petit\\docker\\Confuzzion\\myResultFolder_decompiled_mutants_splitted_good_ok\\CWE369_Divide_by_Zero__int_Property_divide_01_mutant0\\bad.txt"
    # bad_mutant_path = "file.txt"

    main_set_seed_var_value_in_mutant(bad_seed_path, bad_mutant_path)
