import os
import subprocess
import shutil
import re

"""
From a folder with subfolders for each CWE entry
1) Remove comments and blank lines and insert these files directly in a new folder
1.1) Define the new folder where the CWE subfolders with the goods/bad files will be inserted
Inside the remove_comments_and_blank_lines method : Change the 'new_file' var
1.2) Define the folder where are the currents CWE subfolder 
Inside the principal method : change the 'main_folder' var
1.3) Uncomment the 'remove_comments_and_blank_lines(current_folder_files, folder)' line
1.4) Run the command
python3.9 rundiff.py

2) Compute the diff methods between all the associated bad and good files
2.1) Define the folder where are the CWE subfolders
Inside the principal method : change the 'main_folder' var
2.2) Uncomment the 'run_diff_between_bad_and_goods(current_folder_files)' line
2.4) Run the command
python3.9 rundiff.py

3) Compute the diff method and copy the good and bad files if diff | wc -l < X
3.1) Define the folder where are the CWE subfolders
Inside the principal method : change the 'main_folder' var
3.2) Define X
the 2nd arg of the 'run_diff_AND_copy_interesting_files' method
3.3) Define the new bad and good folders
3.4) Uncomment the 'run_diff_AND_copy_interesting_files(current_folder_files, X, folder,...)' line
3.5) Run the command
python3.9 rundiff.py
"""


def remove_comments_from_file(string):
    """
    :param string: file content
    :return: Return the string (file content) without comments
    """
    # https://stackoverflow.com/questions/2319019/using-regex-to-remove-comments-from-source-files
    pattern = r"(\".*?\"|\'.*?\')|(/\*.*?\*/|//[^\r\n]*$)"
    regex = re.compile(pattern, re.MULTILINE | re.DOTALL)

    def _replacer(match):
        if match.group(2) is not None:
            return ""
        else:
            return match.group(1)

    return regex.sub(_replacer, string)


def remove_blank_lines(file):
    """
    Remove the blank lines from a file and overwrite it directly
    :param file: URL of the file
    """
    with open(file, 'r') as f:
        lines = f.read().split("\n")
        non_empty_lines = [line for line in lines if line.strip() != ""]
        string_without_empty_lines = ""
        for line in non_empty_lines:
            string_without_empty_lines += line + "\n"
    with open(file, 'w') as f:
        f.write(string_without_empty_lines)


def remove_comments_and_blank_lines(list_of_files, CWE_folder_entry,new_folder):
    """
    Remove comments and blank lines from the goodXXX.txt and bad.txt inside a CWE folder
    And insert these files in a new folder (new_folder/CWE_folder_entry)
    :param list_of_files: goodXXX.txt and bad.txt files from the CWE folder
    :param CWE_folder_entry: name of the CWE folder entry (e.g. : CWE80..._01)
    """


    try:
        os.mkdir(f'{new_folder}/{CWE_folder_entry}')
    except:
        pass

    for file in list_of_files:
        source_file = open(file, 'r').read()
        # print(remove_comments_from_file(source_file))
        dest_file = open(f'{new_folder}/{CWE_folder_entry}/{file}', 'w')
        dest_file.write(remove_comments_from_file(source_file))
        dest_file.close()
        remove_blank_lines(f'{new_folder}/{CWE_folder_entry}/{file}')


def run_diff_between_bad_and_goods(list_of_goods):
    for good_file in list_of_goods:
        cmd = f'diff -y --suppress-common-lines {good_file} bad.txt | wc -l'
        os.system(cmd)


def run_diff_AND_copy_interesting_files(list_of_goods, diff_lines_authorized, folder,good_folder,bad_folder):
    """
    :param list_of_goods: name of the good files : good1.txt, goodB2G.txt,...
    :param diff_lines_authorized: if ( diff ... | wc -l ) <= diff_lines_authorized alors copy
    :param folder : name of the folder is necessary for the name of the good file if copy
    """
    i_bad = 0
    for good_file in list_of_goods:
        cmd = f'diff -y --suppress-common-lines {good_file} bad.txt | wc -l'
        x = subprocess.check_output(cmd, shell=True)
        if (int(x) <= diff_lines_authorized):
            i_bad = i_bad + 1
            shutil.copyfile(f'{good_file}', f'{good_folder}/{folder}_{good_file}')
            shutil.copyfile(f'bad.txt',
                            f'{bad_folder}/{folder}_bad{i_bad}.txt')


def count_nb_tokens_in_final_dataset(txtfile_path):
    cmd = "awk '{ print NF }' " + txtfile_path # Count nb of token for each line of the txt file
    results = subprocess.check_output(cmd, shell=True)
    all_counts = [int(result) for result in (str(results)[2:-1]).split("\\n") if result != '']
    return all_counts


def main_remove_comments_and_blank_lines(main_folder,dest_folder):
    os.chdir(main_folder)
    CWE_folders_to_explore = os.listdir()

    for folder in CWE_folders_to_explore:
        os.chdir(folder)
        current_folder_files = os.listdir()
        remove_comments_and_blank_lines(current_folder_files, folder, dest_folder)
        os.chdir(main_folder)


def main_run_diff_AND_copy_interesting_files(main_folder, diff_lines_authorized, dest_good_folder, dest_bad_folder, ):
    os.chdir(main_folder)
    CWE_folders_to_explore = os.listdir()

    for folder in CWE_folders_to_explore:
        os.chdir(folder)
        current_folder_files = os.listdir()
        if 'bad.txt' in current_folder_files:
            current_folder_files.remove("bad.txt")
            run_diff_AND_copy_interesting_files(current_folder_files, diff_lines_authorized, folder, dest_good_folder,
                                                dest_bad_folder)
        else:
            print(f'bad not present in folder {folder}')

        os.chdir(main_folder)


def main():
    print("rundiff : MAIN LAUNCHED")
    # main_folder = '/mnt/docker/Test_cases_separated_NCB_req_meth_11CWE_without_comment'
    # main_folder = '/mnt/docker/Test_cases_separated_NCB_req_meth_5CWE'
    main_folder = '/mnt/docker/Test_cases_separated_NCB_req_meth_5CWE_without_comment'
    os.chdir(main_folder)
    CWE_folders_to_explore = os.listdir()

    for folder in CWE_folders_to_explore:
        os.chdir(folder)
        current_folder_files = os.listdir()
        # 1)
        # new_folder = f'/mnt/docker/Test_cases_separated_NCB_req_meth_5CWE_without_comment'
        # remove_comments_and_blank_lines(current_folder_files, folder, new_folder)

        if 'bad.txt' in current_folder_files:
            current_folder_files.remove("bad.txt")
            # 2)
            # run_diff_between_bad_and_goods(current_folder_files)

            # 3)
            #diff_lines_authorized = 6
            #good_folder = f'/mnt/docker/Test_cases_separated_NCB_req_meth_5CWE_without_comment_good_less_than_{diff_lines_authorized}'
            #bad_folder = f'/mnt/docker/Test_cases_separated_NCB_req_meth_5CWE_without_comment_bad_less_than_{diff_lines_authorized}'
            #run_diff_AND_copy_interesting_files(current_folder_files, diff_lines_authorized, folder, good_folder,bad_folder)
        else:
            print(f'bad not present in folder {folder}')

        os.chdir(main_folder)


if __name__ == "__main__":
    #main()

    """
    a = count_nb_tokens_in_final_dataset("/mnt/docker/test_main_python/4_Splitted_tokens_and_unique_txt_file/bads.txt")
    for i in a:
        print(i)
    """
