# Run SootDiff between every compilable prediction and the real target
import os.path
import subprocess
import utils
import json
import logging

SOOTDIFF_FOLDER = "C:/Users/benjamin.petit/docker/SootDiff"
SOOTDIFF_JAR_NAME = "sootdiff-1.0-jar-with-dependencies.jar"
SOOTDIFF_REAL_METHOD_FOLDER_NAME = "real_method"
SOOTDIFF_PREDICTED_METHOD_FOLDER_NAME = "predicted_method"
LOG_FILE_PATH = "C:/Users/benjamin.petit/docker/SootDiff/log_mutants.txt"

def dict_to_json(string_text):
    json_text = json.loads(string_text)
    return json_text

def save_json_as_txt(json_text,filename):
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(json_text, f, ensure_ascii=False, indent=4)


def compute_semantic_diff(output_SootDiff):
    """
    # We need to remove the double quotes from the string ...
    # Otherwise it'll be impossible to convert as dict
    output_SootDiff = output_SootDiff.replace('("', '(')
    output_SootDiff = output_SootDiff.replace('")', ')')

    dict_output_SootDiff = dict_to_json(output_SootDiff)

    number_of_diff_in_bad_method = 0
    for key, item in dict_output_SootDiff['rhs'].items():
        if key.startswith("bad"):
            number_of_diff_in_bad_method += 1

    return (number_of_diff_in_bad_method)
    """
    if output_SootDiff == "":
        return 0
    else:
        number_of_diff_in_bad_method = output_SootDiff.count("\"bad.")
        number_of_diff_in_bad_method /= 2
        return number_of_diff_in_bad_method


def compute_semantic_diff_without_string(output_SootDiff):
    if output_SootDiff == "":
        return 0
    else:
        number_of_diff_in_bad_method = output_SootDiff.count("\"bad.")
        number_of_diff_in_bad_method /= 2
        number_of_diff_about_strings = output_SootDiff.count("java.lang.StringBuilder")
        number_of_diff_about_strings /= 2
        return (number_of_diff_in_bad_method - number_of_diff_about_strings)


def remove_spaces_in_strings(java_file_path):
    utils.replace_word_in_file(java_file_path, "\" ", "\"")
    utils.replace_word_in_file(java_file_path, " \"", "\"")
    utils.replace_word_in_file(java_file_path, "results :", "results:")
    utils.replace_word_in_file(java_file_path, "result :", "result:")
    utils.replace_word_in_file(java_file_path, "bad :", "bad:")
    utils.replace_word_in_file(java_file_path, "100 /", "100/")
    utils.replace_word_in_file(java_file_path, "100 %", "100%")
    utils.replace_word_in_file(java_file_path, "Benign ", "Benign")
    utils.replace_word_in_file(java_file_path, "< init >", "<init>")



def remove_spaces_in_string_in_dataset(dataset_path):
    for file in os.listdir(dataset_path):
        if file.endswith(".java"):
            remove_spaces_in_strings(os.path.join(dataset_path,file))


def execute_SootDiff(class_name):
    """
    Execute SootDiff on the file class_file_name.
    This file must be present in the 2 folders:
        - SOOTDIFF_REAL_METHOD_FOLDER_NAME
        - SOOTDIFF_PREDICTED_METHOD_FOLDER_NAME
    :param class_file_name: The name of the classfile on which execute the diff
    :return:
    """
    os.chdir(SOOTDIFF_FOLDER)
    cmd = "java -jar " \
          f"{SOOTDIFF_JAR_NAME} " \
          "-reffile " \
          f'"{SOOTDIFF_REAL_METHOD_FOLDER_NAME}" ' \
          "-otherfile " \
          f'"{SOOTDIFF_PREDICTED_METHOD_FOLDER_NAME}" ' \
          "-qname " \
          f"{class_name}"
    print(cmd)
    results = subprocess.check_output(cmd, shell=True)
    results = str(results)[2:-1] # byte to str
    #print((str(results)[2:-1]))

    print(results)
    return results


def execute_SootDiff_on_dataset(predicted_files_folder_path,dataset_path,dataset_name,fold,iter):
    diff_prediction_dict = {}
    # From the folder with all the predicted class files
    for file in os.listdir(predicted_files_folder_path):
        if file.endswith(".class"):

            # Define the name of the corresponding java file and the initial java file
            equivalent_java_file = os.path.splitext(file)[0] + ".java"
            initial_class_name = os.path.splitext(file)[0][:-2]
            initial_java_file = initial_class_name + ".java"

            ## Copy & Rename the predicted file
            utils.copy_file(
                os.path.join(predicted_files_folder_path, equivalent_java_file),
                os.path.join(SOOTDIFF_FOLDER, SOOTDIFF_PREDICTED_METHOD_FOLDER_NAME, initial_java_file))
            ## Rename the class file inside the file
            utils.replace_word_in_file(
                os.path.join(SOOTDIFF_FOLDER, SOOTDIFF_PREDICTED_METHOD_FOLDER_NAME, initial_java_file),
                os.path.splitext(file)[0],
                os.path.splitext(file)[0][:-2]
            )

            os.chdir(os.path.join(SOOTDIFF_FOLDER, SOOTDIFF_PREDICTED_METHOD_FOLDER_NAME))
            utils.compile_one_test_case(initial_java_file)

            ## Find its initial file and copy it
            utils.copy_file(
                os.path.join(dataset_path, initial_java_file),
                os.path.join(SOOTDIFF_FOLDER, SOOTDIFF_REAL_METHOD_FOLDER_NAME, initial_java_file))

            # Remove package line
            utils.modify_line_in_java_file(
                os.path.join(SOOTDIFF_FOLDER, SOOTDIFF_REAL_METHOD_FOLDER_NAME, initial_java_file),
                "package",
                "")

            ## Compile the initial java file
            os.chdir(os.path.join(SOOTDIFF_FOLDER, SOOTDIFF_REAL_METHOD_FOLDER_NAME))
            utils.compile_one_test_case(initial_java_file)

            # Launch SootDiff
            # There is sometime an error during the execution due to a Thread ??
            # Re-launch the execution seems to be ok
            output = None
            SootDiff_must_execute = True
            while_count = 0
            while SootDiff_must_execute is True:
                if while_count < 5:
                    try:
                        output = execute_SootDiff(initial_class_name)
                        SootDiff_must_execute = False
                    except Exception as e:
                        print(e)
                    finally:
                        while_count += 1
                else:
                    logging.error(f"Critical error with file {file}")
                    SootDiff_must_execute = False


            if output is not None :
                diff = compute_semantic_diff(output)
                diff_without_string = compute_semantic_diff_without_string(output)

                temp_dict = {
                    "nb_diff": diff,
                    "nb_diff_without_string" : diff_without_string,
                    "output": output}
                diff_prediction_dict[file] = temp_dict

            # Remove the files

            try :
                utils.remove_file(os.path.join(SOOTDIFF_FOLDER, SOOTDIFF_REAL_METHOD_FOLDER_NAME, initial_java_file))
                utils.remove_file(os.path.join(SOOTDIFF_FOLDER, SOOTDIFF_REAL_METHOD_FOLDER_NAME,
                                               os.path.splitext(initial_java_file)[0] + ".class"))
                utils.remove_file(os.path.join(SOOTDIFF_FOLDER, SOOTDIFF_PREDICTED_METHOD_FOLDER_NAME, initial_java_file))
                utils.remove_file(os.path.join(SOOTDIFF_FOLDER, SOOTDIFF_PREDICTED_METHOD_FOLDER_NAME,
                                               os.path.splitext(initial_java_file)[0] + ".class"))
            except Exception as e:
                print(e)

    # Save the results
    output_json_filename = f"outputs/mutants_dataset/{dataset_name}__{fold}__iter{iter}__WITH_DIFF_WITHOUT_STRINGS.json"
    with open(output_json_filename, 'w') as output_file:
        json.dump(diff_prediction_dict, output_file, indent=4)


if __name__ == "__main__":

    logging.basicConfig(filename=LOG_FILE_PATH, encoding='utf-8', level=logging.DEBUG,
                        format='%(asctime)s %(message)s', datefmt='%d/%m/%Y %I:%M:%S %p')

    fold_list = ["fold0","fold1","fold2","fold3","fold4"]
    iter_list = ["2000", "6000", "10000"]
    dataset_name = "OpenNMT_5CWE_InferOK_token_less_150_Mutants"
    dataset_path = "C:/Users/benjamin.petit/Documents/Juliet_Test_Suite_5CWE_req_only_InferOK_Mutants_InferOK/dataset_without_spaces_in_strings"

    # To prevent SootDiff to detect the diff between some spaces inside the strings (ex : "results : " vs "results:")
    logging.info(f"## Remove spaces in strings")
    remove_spaces_in_string_in_dataset(dataset_path)

    logging.info(f"Starting the execution of SootDiff")
    logging.info(f"dataset_name : {dataset_name}")
    logging.info(f"dataset_path : {dataset_path}")
    for fold in fold_list:
        logging.info(f"# Starting FOLD {fold}")
        for iter in iter_list:
            logging.info(f"## Starting ITER {iter}")
            predicted_files_folder_path = "C:/Users/benjamin.petit/Documents/Seq2seq/" \
                                          f"{dataset_name}" \
                                          f"/{fold}" \
                                          "/results"\
                                          f"/test_beam5_iter{iter}"

            # To prevent SootDiff to detect the diff between some spaces inside the strings (ex : "results : " vs "results:")
            logging.info(f"### Remove spaces in strings")
            remove_spaces_in_string_in_dataset(predicted_files_folder_path)

            logging.info(f"### Execution of SootDiff")
            execute_SootDiff_on_dataset(predicted_files_folder_path, dataset_path, dataset_name, fold, iter)









